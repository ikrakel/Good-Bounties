schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bounty {
  id: ID!
  tokenId: BigInt!
  createdBy: Bytes!
  deadline: BigInt!
  status: String!
  title: String!
  description: String!
  criteria: String!
  location: String!
  uri: String!
  imageUrl: String!
  totalStakers: BigInt!
  totalStaked: BigInt!
  bountyStakers(skip: Int = 0, first: Int = 100, orderBy: BountyStaker_orderBy, orderDirection: OrderDirection, where: BountyStaker_filter): [BountyStaker!]!
}

type BountyStaker {
  id: ID!
  bounty: Bounty!
  staker: Staker!
  amount: BigInt!
}

input BountyStaker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  bounty: String
  bounty_not: String
  bounty_gt: String
  bounty_lt: String
  bounty_gte: String
  bounty_lte: String
  bounty_in: [String!]
  bounty_not_in: [String!]
  bounty_contains: String
  bounty_contains_nocase: String
  bounty_not_contains: String
  bounty_not_contains_nocase: String
  bounty_starts_with: String
  bounty_starts_with_nocase: String
  bounty_not_starts_with: String
  bounty_not_starts_with_nocase: String
  bounty_ends_with: String
  bounty_ends_with_nocase: String
  bounty_not_ends_with: String
  bounty_not_ends_with_nocase: String
  bounty_: Bounty_filter
  staker: String
  staker_not: String
  staker_gt: String
  staker_lt: String
  staker_gte: String
  staker_lte: String
  staker_in: [String!]
  staker_not_in: [String!]
  staker_contains: String
  staker_contains_nocase: String
  staker_not_contains: String
  staker_not_contains_nocase: String
  staker_starts_with: String
  staker_starts_with_nocase: String
  staker_not_starts_with: String
  staker_not_starts_with_nocase: String
  staker_ends_with: String
  staker_ends_with_nocase: String
  staker_not_ends_with: String
  staker_not_ends_with_nocase: String
  staker_: Staker_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BountyStaker_filter]
  or: [BountyStaker_filter]
}

enum BountyStaker_orderBy {
  id
  bounty
  bounty__id
  bounty__tokenId
  bounty__createdBy
  bounty__deadline
  bounty__status
  bounty__title
  bounty__description
  bounty__criteria
  bounty__location
  bounty__uri
  bounty__imageUrl
  bounty__totalStakers
  bounty__totalStaked
  staker
  staker__id
  staker__address
  staker__stakedAmount
  amount
}

input Bounty_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokenId: BigInt
  tokenId_not: BigInt
  tokenId_gt: BigInt
  tokenId_lt: BigInt
  tokenId_gte: BigInt
  tokenId_lte: BigInt
  tokenId_in: [BigInt!]
  tokenId_not_in: [BigInt!]
  createdBy: Bytes
  createdBy_not: Bytes
  createdBy_gt: Bytes
  createdBy_lt: Bytes
  createdBy_gte: Bytes
  createdBy_lte: Bytes
  createdBy_in: [Bytes!]
  createdBy_not_in: [Bytes!]
  createdBy_contains: Bytes
  createdBy_not_contains: Bytes
  deadline: BigInt
  deadline_not: BigInt
  deadline_gt: BigInt
  deadline_lt: BigInt
  deadline_gte: BigInt
  deadline_lte: BigInt
  deadline_in: [BigInt!]
  deadline_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  criteria: String
  criteria_not: String
  criteria_gt: String
  criteria_lt: String
  criteria_gte: String
  criteria_lte: String
  criteria_in: [String!]
  criteria_not_in: [String!]
  criteria_contains: String
  criteria_contains_nocase: String
  criteria_not_contains: String
  criteria_not_contains_nocase: String
  criteria_starts_with: String
  criteria_starts_with_nocase: String
  criteria_not_starts_with: String
  criteria_not_starts_with_nocase: String
  criteria_ends_with: String
  criteria_ends_with_nocase: String
  criteria_not_ends_with: String
  criteria_not_ends_with_nocase: String
  location: String
  location_not: String
  location_gt: String
  location_lt: String
  location_gte: String
  location_lte: String
  location_in: [String!]
  location_not_in: [String!]
  location_contains: String
  location_contains_nocase: String
  location_not_contains: String
  location_not_contains_nocase: String
  location_starts_with: String
  location_starts_with_nocase: String
  location_not_starts_with: String
  location_not_starts_with_nocase: String
  location_ends_with: String
  location_ends_with_nocase: String
  location_not_ends_with: String
  location_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_gt: String
  imageUrl_lt: String
  imageUrl_gte: String
  imageUrl_lte: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_contains: String
  imageUrl_contains_nocase: String
  imageUrl_not_contains: String
  imageUrl_not_contains_nocase: String
  imageUrl_starts_with: String
  imageUrl_starts_with_nocase: String
  imageUrl_not_starts_with: String
  imageUrl_not_starts_with_nocase: String
  imageUrl_ends_with: String
  imageUrl_ends_with_nocase: String
  imageUrl_not_ends_with: String
  imageUrl_not_ends_with_nocase: String
  totalStakers: BigInt
  totalStakers_not: BigInt
  totalStakers_gt: BigInt
  totalStakers_lt: BigInt
  totalStakers_gte: BigInt
  totalStakers_lte: BigInt
  totalStakers_in: [BigInt!]
  totalStakers_not_in: [BigInt!]
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  bountyStakers_: BountyStaker_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bounty_filter]
  or: [Bounty_filter]
}

enum Bounty_orderBy {
  id
  tokenId
  createdBy
  deadline
  status
  title
  description
  criteria
  location
  uri
  imageUrl
  totalStakers
  totalStaked
  bountyStakers
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  bounty(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bounty
  bounties(
    skip: Int = 0
    first: Int = 100
    orderBy: Bounty_orderBy
    orderDirection: OrderDirection
    where: Bounty_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bounty!]!
  bountyStaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BountyStaker
  bountyStakers(
    skip: Int = 0
    first: Int = 100
    orderBy: BountyStaker_orderBy
    orderDirection: OrderDirection
    where: BountyStaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BountyStaker!]!
  staker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Staker
  stakers(
    skip: Int = 0
    first: Int = 100
    orderBy: Staker_orderBy
    orderDirection: OrderDirection
    where: Staker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Staker!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Staker {
  id: ID!
  address: Bytes!
  stakedAmount: BigInt!
  stakedBounties(skip: Int = 0, first: Int = 100, orderBy: BountyStaker_orderBy, orderDirection: OrderDirection, where: BountyStaker_filter): [BountyStaker!]!
}

input Staker_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  stakedAmount: BigInt
  stakedAmount_not: BigInt
  stakedAmount_gt: BigInt
  stakedAmount_lt: BigInt
  stakedAmount_gte: BigInt
  stakedAmount_lte: BigInt
  stakedAmount_in: [BigInt!]
  stakedAmount_not_in: [BigInt!]
  stakedBounties_: BountyStaker_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Staker_filter]
  or: [Staker_filter]
}

enum Staker_orderBy {
  id
  address
  stakedAmount
  stakedBounties
}

type Subscription {
  bounty(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bounty
  bounties(
    skip: Int = 0
    first: Int = 100
    orderBy: Bounty_orderBy
    orderDirection: OrderDirection
    where: Bounty_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bounty!]!
  bountyStaker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BountyStaker
  bountyStakers(
    skip: Int = 0
    first: Int = 100
    orderBy: BountyStaker_orderBy
    orderDirection: OrderDirection
    where: BountyStaker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BountyStaker!]!
  staker(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Staker
  stakers(
    skip: Int = 0
    first: Int = 100
    orderBy: Staker_orderBy
    orderDirection: OrderDirection
    where: Staker_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Staker!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}